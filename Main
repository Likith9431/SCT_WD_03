import streamlit as st

# Initialize the game board and player variables
if 'board' not in st.session_state:
    st.session_state['board'] = [''] * 9  # Empty 3x3 board
if 'current_player' not in st.session_state:
    st.session_state['current_player'] = 'X'  # Start with player 'X'
if 'winner' not in st.session_state:
    st.session_state['winner'] = None
if 'game_over' not in st.session_state:
    st.session_state['game_over'] = False

# Function to check if there is a winner
def check_winner():
    winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                            (0, 3, 6), (1, 4, 7), (2, 5, 8),
                            (0, 4, 8), (2, 4, 6)]
    
    for combo in winning_combinations:
        if (st.session_state['board'][combo[0]] == st.session_state['board'][combo[1]] == 
            st.session_state['board'][combo[2]] and st.session_state['board'][combo[0]] != ''):
            st.session_state['winner'] = st.session_state['board'][combo[0]]
            st.session_state['game_over'] = True
            return True
    if '' not in st.session_state['board']:
        st.session_state['game_over'] = True
        return False
    return False

# Function to handle player clicks
def handle_click(index):
    if st.session_state['board'][index] == '' and not st.session_state['game_over']:
        st.session_state['board'][index] = st.session_state['current_player']
        if check_winner():
            st.success(f"Player {st.session_state['winner']} wins!")
        else:
            # Switch to the other player
            st.session_state['current_player'] = 'O' if st.session_state['current_player'] == 'X' else 'X'

# Function to reset the game
def reset_game():
    st.session_state['board'] = [''] * 9
    st.session_state['current_player'] = 'X'
    st.session_state['winner'] = None
    st.session_state['game_over'] = False

# Title and instructions
st.title("Tic-Tac-Toe Game")
st.write("Click on a square to make your move. Player X starts first.")

# Game board as a 3x3 grid
for i in range(0, 9, 3):
    cols = st.columns(3)
    for j in range(3):
        index = i + j
        cols[j].button(st.session_state['board'][index], on_click=handle_click, args=(index,))

# Reset button
if st.button("Reset Game"):
    reset_game()

# Show current status
if not st.session_state['game_over']:
    st.write(f"Current Player: {st.session_state['current_player']}")
else:
    if st.session_state['winner']:
        st.success(f"Player {st.session_state['winner']} wins!")
    else:
        st.warning("It's a draw!")
